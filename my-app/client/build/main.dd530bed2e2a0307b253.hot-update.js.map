{"version":3,"file":"main.dd530bed2e2a0307b253.hot-update.js","sources":["webpack:///./src/pages/shop/Checkout/CustomerSelector.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport { graphql } from 'react-apollo';\nimport { Box, Text, Link, Input, Button, Details, DetailsContent } from '@deity/falcon-ui';\nimport { SignOutMutation, GET_CUSTOMER, toGridTemplate, OpenSidebarMutation } from '@deity/falcon-ecommerce-uikit';\nimport SectionHeader from './CheckoutSectionHeader';\n\nconst customerEmailFormLayout = {\n  customerEmailFormLayout: {\n    display: 'grid',\n    my: 'xs',\n    gridGap: 'sm',\n    // prettier-ignore\n    gridTemplate: {\n      xs: toGridTemplate([\n        ['1fr'   ],\n        ['input' ],\n        ['button']\n      ]),\n      md: toGridTemplate([\n        ['2fr',   '1fr'   ],\n        ['input', 'button']\n      ])\n    }\n  }\n};\n\nconst emailRx = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst divStyle = {\n  fontSize: '16px'\n};\n\nconst EmailForm = ({ email = '', setEmail }) => (\n    <Formik\n        onSubmit={values => setEmail(values.email)}\n        initialValues={{ email }}\n        validate={values => {\n          if (!emailRx.test(values.email.toLowerCase())) {\n            return {\n              email: 'Invalid email address'\n            };\n          }\n        }}\n    >\n      {({ values, errors, handleChange }) => (\n          <Form>\n            <Text>Type your email and continue as guest:</Text>\n            <Box defaultTheme={customerEmailFormLayout}>\n              <Box gridArea=\"input\">\n                <Input style={divStyle} type=\"text\" name=\"email\" value={values.email} onChange={handleChange} />\n                <ErrorMessage name=\"email\" render={msg => <Text color=\"error\">{msg}</Text>} />\n              </Box>\n              <Button gridArea=\"button\" disabled={errors.email} type=\"submit\">\n                continue as guest\n              </Button>\n            </Box>\n          </Form>\n      )}\n    </Formik>\n);\n\nEmailForm.propTypes = {\n  setEmail: PropTypes.func.isRequired,\n  email: PropTypes.string\n};\n\nclass EmailSection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let email = props.email || '';\n\n    if (props.data && props.data.customer) {\n      ({ email } = props.data.customer);\n      props.setEmail(email);\n    }\n\n    this.state = {\n      email: props.email,\n      getPrevProps: () => this.props\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      data: { customer: prevCustomer }\n    } = prevState.getPrevProps();\n    const {\n      data: { customer: nextCustomer }\n    } = nextProps;\n\n    const { email: prevCustomerEmail } = prevCustomer || {};\n    const { email: nextCustomerEmail } = nextCustomer || {};\n\n    if (prevCustomerEmail !== nextCustomerEmail) {\n      // user has signed in or out so we have to trigger setEmail() with the new value\n      nextProps.setEmail(nextCustomerEmail);\n\n      // if there's no email in nextProps then customer just signed out - in that case we trigger\n      // edit process so wizard switches to correct section\n      if (!nextCustomerEmail) {\n        nextProps.onEditRequested();\n      }\n\n      return {\n        ...prevState,\n        email: nextCustomerEmail || ''\n      };\n    }\n\n    if (nextProps.email && nextProps.email !== prevState.email) {\n      return {\n        ...prevState,\n        email: nextProps.email\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let header;\n    const { open, data, onEditRequested } = this.props;\n    const isSignedIn = !!data.customer;\n\n    if (!open) {\n      header = (\n          <SignOutMutation>\n            {signOut => (\n                <SectionHeader\n                    title=\"Customer\"\n                    editLabel={isSignedIn ? 'Sign out' : 'Edit'}\n                    onActionClick={isSignedIn ? signOut : onEditRequested}\n                    complete\n                    summary={<Text>{this.state.email}</Text>}\n                />\n            )}\n          </SignOutMutation>\n      );\n    } else {\n      header = <SectionHeader title=\"Customer\" />;\n    }\n\n    const content = (\n        <OpenSidebarMutation>\n          {openSidebar => (\n              <Box>\n                <EmailForm email={this.state.email} setEmail={this.props.setEmail} />\n                <Text>\n                  or\n                  <Link\n                      mx=\"xs\"\n                      color=\"primary\"\n                      onClick={() =>\n                          openSidebar({\n                            variables: {\n                              contentType: 'account'\n                            }\n                          })\n                      }\n                  >\n                    sign in with your account\n                  </Link>\n                  if you are already registered\n                </Text>\n              </Box>\n          )}\n        </OpenSidebarMutation>\n    );\n\n    return (\n        <Details open={open}>\n          {header}\n          {content ? <DetailsContent>{content}</DetailsContent> : null}\n        </Details>\n    );\n  }\n}\n\nEmailSection.propTypes = {\n  // data form GET_CUSTOMER query\n  data: PropTypes.shape({}),\n  // currently selected email\n  email: PropTypes.string,\n  // callback that sets email\n  setEmail: PropTypes.func.isRequired,\n  // callback that should be called when user requests edit of this particular section\n  onEditRequested: PropTypes.func,\n  // flag that indicates if the section is currently open\n  open: PropTypes.bool\n};\n\nEmailSection.defaultProps = {\n  email: ''\n};\n\nexport default graphql(GET_CUSTOMER)(EmailSection);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AANA;AALA;AADA;AAoBA;AAEA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AADA;AADA;AAJA;AAAA;AAAA;AAAA;AAAA;AAoBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AA/GA;AACA;AAgHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AADA;AAIA;;;;A","sourceRoot":""}